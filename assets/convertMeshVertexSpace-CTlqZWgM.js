import{bf as p,aC as m,bq as s}from"./index-CXz_NmzW.js";import{p as n}from"./MeshVertexAttributes-DwjNvG2x.js";import{B as a}from"./vertexSpaceConversion-D19cTeZS.js";import"./meshProperties-B4vupnXI.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-y8yjzpGl.js";import"./computeTranslationToOriginAndRotation-DbixENct.js";import"./projectPointToVector-Bt7DbqUf.js";import"./meshVertexSpaceUtils-BrAhT9zK.js";import"./MeshLocalVertexSpace-DlJaQYak.js";import"./vec3-IZvpglL5.js";import"./BufferView-CHwpS53Y.js";import"./vec4-YFedJnaz.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
