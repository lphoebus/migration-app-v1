import{aC as r,eI as w,eJ as c,eK as p,eL as q,eM as y,eN as x,eO as g,eP as h,eQ as E}from"./index-ycM7R5Uo.js";async function B(e){if(!(e!=null&&e.layer)||!e.field&&!e.valueExpression)throw new r("unique-values:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");const s=e.valueExpression||e.sqlExpression,n=s&&!e.sqlExpression;if(s){if(n){if(!e.view)throw new r("unique-values:missing-parameters","View is required when 'valueExpression' is specified")}else if(!e.valueExpression)throw new r("unique-values:missing-parameters","'valueExpression' parameters are required")}e.forBinning&&w(e,"unique-values");const{layer:o,...f}=e,d=[...c,p.ImageryLayer],l=e.forBinning?q:d,a=y(o,l,e.forBinning);if(!a)throw new r("unique-values:invalid-parameters","'layer' must be one of these types: "+x(l).join(", "));const i={layerAdapter:a,...f},v=i.signal!=null?{signal:i.signal}:null;await a.load(v);const m=await g({field:i.field,field2:i.field2,field3:i.field3,valueExpression:i.valueExpression}),t=h(a,m,"unique-values:invalid-parameters");if(t)throw t;i.filter&&!i.filter.spatialRelationship&&(i.filter.spatialRelationship="intersects");const u=E(i.filter,"summary-statistics:invalid-parameters");if(u)throw u;return i}async function b(e){const{layerAdapter:s,...n}=await B(e);return s.uniqueValues(n)}export{b as default};
